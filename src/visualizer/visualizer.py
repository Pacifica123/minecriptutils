"""visualizer.py
Wrapper вокруг pyvis для генерации HTML. Встраивает шаблон из templates/base.html
и добавляет точки расширения для фронтенда: custom.js и кастомные CSS.
"""
from typing import Optional
from pyvis.network import Network
import networkx as nx
import json
import os


class Visualizer:
    def __init__(self, G: nx.Graph, config: Optional[dict] = None, width: str = '100%', height: str = '100vh'):
        self.G = G
        self.config = config or {}
        self.net = Network(height=height, width=width, directed=True)
        # pyvis: отключаем автоматическое открытие браузера
        self.net.barnes_hut()

    def _node_to_pyvis(self, node, attrs):
        size = attrs.get('size', 20)
        color = attrs.get('color') or self.config.get('fallback_color', '#888888')
        style = attrs.get('style', {})
        border = style.get('border_color', '#000000')
        border_width = style.get('border_width', 1)
        shape = style.get('shape', 'dot')
        return {
            'label': attrs.get('label', node),
            'size': size,
            'color': {'background': color, 'border': border},
            'borderWidth': border_width,
            'shape': shape,
            'title': attrs.get('label', node)
        }

    def render(self, output_file: str, template_dir: Optional[str] = None, bg: Optional[dict] = None):
        # добавляем узлы и ребра
        for n, attrs in self.G.nodes(data=True):
            props = self._node_to_pyvis(n, attrs)
            self.net.add_node(n, **props)
        for a, b, attrs in self.G.edges(data=True):
            arrows = 'to' if attrs.get('relation') != 'undirected' else ''
            width = attrs.get('width', 1)
            dashes = attrs.get('dashes', False)
            self.net.add_edge(a, b, arrows=arrows, width=width, dashes=dashes, title=attrs.get('title', ''))

        # dump temporary html generated by pyvis
        tmp = output_file + '.tmp.html'
        self.net.write_html(tmp, notebook=False, open_browser=False)

        # optionally inject custom template parts
        html = open(tmp, 'r', encoding='utf-8').read()
        os.remove(tmp)

        # inject bg or custom css/js from template_dir
        injection = ''
        if template_dir:
            css_path = os.path.join(template_dir, 'custom.css')
            js_path = os.path.join(template_dir, 'custom.js')
            if os.path.exists(css_path):
                injection += f"<link rel='stylesheet' href='custom.css'>\n"
            if os.path.exists(js_path):
                injection += f"<script src='custom.js'></script>\n"
        if bg:
            if bg.get('type') == 'color':
                injection += f"<style>body{{background:{bg.get('value')} !important;}}</style>\n"
            elif bg.get('type') == 'image':
                injection += f"<style>body{{background-image:url('{bg.get('value')}'); background-size:cover; background-position:center;}}</style>\n"

        # вставим injection перед </head>
        if '</head>' in html:
            html = html.replace('</head>', injection + '\n</head>')
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html)
